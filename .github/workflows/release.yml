name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        # platform: [macos-latest, ubuntu-22.04, windows-latest]
        platform: [windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          cache-on-failure: true
          key: ${{ matrix.platform }}-rust-${{ hashFiles('**/Cargo.lock') }}
          shared-key: ${{ matrix.platform }}-rust

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ matrix.platform }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ matrix.platform }}-node-

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ matrix.platform }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.platform }}-cargo-

      - name: Cache Tauri build
        uses: actions/cache@v4
        with:
          path: |
            src-tauri/target
          key: ${{ matrix.platform }}-tauri-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('src-tauri/src/**') }}
          restore-keys: |
            ${{ matrix.platform }}-tauri-${{ hashFiles('**/Cargo.lock') }}-
            ${{ matrix.platform }}-tauri-

      - name: Install frontend dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build frontend
        run: npm run build

      - name: Optimize Windows build (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          # 设置环境变量优化Windows构建
          echo "CARGO_INCREMENTAL=1" >> $env:GITHUB_ENV
          echo "CARGO_TARGET_DIR=target" >> $env:GITHUB_ENV
          echo "RUSTC_WRAPPER=" >> $env:GITHUB_ENV

      - name: Pre-build Rust dependencies (Windows only)
        if: matrix.platform == 'windows-latest'
        working-directory: src-tauri
        run: |
          # 预编译依赖，使用check命令来避免完整编译但仍然下载和检查依赖
          cargo check --release || echo "Dependencies check completed"
          # 或者使用fetch来预下载依赖
          cargo fetch

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          # Windows构建优化环境变量
          CARGO_INCREMENTAL: ${{ matrix.platform == 'windows-latest' && '1' || '' }}
          CARGO_NET_RETRY: 10
          CARGO_NET_TIMEOUT: 300
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'Clipboard Manager ${{ github.ref_name }}'
          releaseBody: |
            ## 🚀 新版本发布

            ### ✨ 主要功能
            - 📋 实时监控剪贴板内容（文本和图片）
            - ⭐ 收藏重要的剪贴板内容
            - 🔍 快速搜索历史记录
            - ⌨️ 全局快捷键支持 (Ctrl+Shift+V)
            - 🚀 一键复制并粘贴
            - 🗂️ 智能识别来源应用程序
            - 🧹 自动清理过期记录
            - 🔧 开机自启动选项

            ### 📦 安装说明
            
            **Windows**: 下载 `.msi` 或 `.exe` 文件
            **macOS**: 下载 `.dmg` 文件
            **Linux**: 下载 `.deb` 或 `.AppImage` 文件

            ### 🔧 使用方法
            1. 安装并启动应用
            2. 程序自动最小化到系统托盘
            3. 使用 `Ctrl+Shift+V` 快捷键打开主界面
            4. 复制任何内容，程序会自动记录
            5. 点击历史记录即可快速粘贴

            ### 📁 数据存储
            - 数据库和图片文件保存在程序安装目录
            - 设置文件保存在用户配置目录

            如有问题请提交 [Issue](https://github.com/${{ github.repository }}/issues)
          releaseDraft: false
          prerelease: false
          includeReleaseId: true
          projectPath: '.'
          distPath: './dist'
          configPath: './src-tauri/tauri.conf.json' 