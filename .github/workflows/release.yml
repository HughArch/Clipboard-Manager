name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            os: macos
            arch: universal
            target: universal-apple-darwin
            rust-targets: "aarch64-apple-darwin,x86_64-apple-darwin"
          - platform: ubuntu-22.04
            os: linux
            arch: x86_64
            target: x86_64-unknown-linux-gnu
            rust-targets: ""
          - platform: windows-latest
            os: windows
            arch: x86_64
            target: x86_64-pc-windows-msvc
            rust-targets: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          # 根据矩阵配置添加目标架构
          targets: ${{ matrix.rust-targets }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          # 禁用 sccache 缓存以避免 CI 问题
          cache-all-crates: "true"

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Setup macOS build environment
        if: matrix.os == 'macos'
        run: |
          # 禁用 sccache
          echo "RUSTC_WRAPPER=" >> $GITHUB_ENV
          echo "SCCACHE_DISABLE=1" >> $GITHUB_ENV
          # 设置 macOS 构建环境变量
          echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          # 确保使用系统默认的 clang
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        shell: bash

      - name: Setup other platforms
        if: matrix.os != 'macos'
        run: |
          echo "RUSTC_WRAPPER=" >> $GITHUB_ENV
          echo "SCCACHE_DISABLE=1" >> $GITHUB_ENV
        shell: bash

      - name: Verify Rust targets (macOS only)
        if: matrix.os == 'macos'
        run: |
          echo "已安装的 Rust 目标架构:"
          rustup target list --installed
          echo "当前系统架构: $(uname -m)"
          echo "Rust 默认目标: $(rustc -vV | grep host)"
          echo "Xcode 版本:"
          xcode-select --print-path
          clang --version
        shell: bash

      - name: Build the app
        uses: tauri-apps/tauri-action@v0.5.14
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          # 禁用 sccache 避免 CI 环境中的问题
          RUSTC_WRAPPER: ""
          SCCACHE_DISABLE: "1"
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'Clipboard Manager ${{ github.ref_name }}'
          releaseBody: |
            ## 🚀 新版本发布

            ### ✨ 主要功能
            - 增加前后端日志记录功能
            - 优化设置页面UI展示
            - 支持 Apple Silicon (M1/M2/M3) 和 Intel 处理器
          releaseDraft: false
          prerelease: false
          # 根据目标平台设置构建参数
          args: ${{ matrix.target && format('--target {0}', matrix.target) || '' }}

      - name: Verify Universal Binary (macOS only)
        if: matrix.os == 'macos'
        run: |
          echo "检查生成的 macOS 应用程序架构:"
          if [ -f "src-tauri/target/universal-apple-darwin/release/bundle/macos/Clipboard Manager.app/Contents/MacOS/Clipboard Manager" ]; then
            file "src-tauri/target/universal-apple-darwin/release/bundle/macos/Clipboard Manager.app/Contents/MacOS/Clipboard Manager"
            lipo -info "src-tauri/target/universal-apple-darwin/release/bundle/macos/Clipboard Manager.app/Contents/MacOS/Clipboard Manager"
          else
            echo "未找到 Universal Binary 文件，列出目标目录内容:"
            find src-tauri/target -name "Clipboard Manager" -type f 2>/dev/null || echo "未找到任何 Clipboard Manager 可执行文件"
          fi
        shell: bash 